import 'package:flutter/foundation.dart';
import 'package:sqflite/sqflite.dart';

import 'package:my_travels/data/entities/traveler_entity.dart';
import 'package:my_travels/data/local/database_service.dart';
import 'package:my_travels/data/tables/traveler_table.dart';

/// Manages traveler-related data operations with the local database.
class TravelerRepository {
  /// The singleton instance of the database service.
  final DatabaseService _dbService = DatabaseService.instance;

  /// Inserts a new traveler into the database.
  ///
  /// Returns the ID of the newly inserted row.
  Future<int> insertTraveler(Traveler traveler) async {
    try {
      final db = await _dbService.database;
      final map = traveler.toMap();
      map.remove('id'); // ID is auto-generated by the database.

      return await db.insert(
        TravelerTable.tableName,
        map,
        conflictAlgorithm: ConflictAlgorithm.replace,
      );
    } catch (e) {
      // debugPrint('Erro ao inserir viajante: $e');
      rethrow;
    }
  }

  /// Retrieves all travelers from the database.
  Future<List<Traveler>> getTravelers() async {
    final db = await _dbService.database;
    final maps = await db.query(TravelerTable.tableName);
    return List.generate(maps.length, (i) {
      return Traveler.fromMap(maps[i]);
    });
  }

  /// Deletes a traveler from the database by their [id].
  ///
  /// Returns the number of rows affected.
  Future<int> deleteTraveler(int id) async {
    try {
      final db = await _dbService.database;
      return await db.delete(
        TravelerTable.tableName,
        where: '${TravelerTable.id} = ?',
        whereArgs: [id],
      );
    } catch (e) {
      // debugPrint('Erro ao deletar viajante: $e');
      rethrow;
    }
  }

  /// Updates an existing traveler in the database.
  ///
  /// Returns the number of rows affected.
  Future<int> updateTraveler(Traveler traveler) async {
    try {
      final db = await _dbService.database;
      return await db.update(
        TravelerTable.tableName,
        traveler.toMap(),
        where: '${TravelerTable.id} = ?',
        whereArgs: [traveler.id],
      );
    } catch (e) {
      // debugPrint('Erro ao atualizar viajante: $e');
      rethrow;
    }
  }
}
